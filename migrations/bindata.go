// Code generated by go-bindata.
// sources:
// migrations/1506167417_init.down.sql
// migrations/1506167417_init.up.sql
// migrations/gen.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1506167417_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _1506167417_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1506167417_initDownSql,
		"1506167417_init.down.sql",
	)
}

func _1506167417_initDownSql() (*asset, error) {
	bytes, err := _1506167417_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1506167417_init.down.sql", size: 0, mode: os.FileMode(420), modTime: time.Unix(1506167417, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1506167417_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x41\x4b\xc3\x40\x10\x85\xef\xf9\x15\xef\xd8\x82\x07\x0f\x7a\xf2\x94\xd6\xa9\x06\x63\x2a\xdb\xad\xb4\x27\xd9\x76\x47\x3b\x98\x64\x75\x33\x51\xfc\xf7\xb2\x41\x43\x11\x14\x8f\xf3\xbe\xb7\x7c\x8f\x9d\x1b\xca\x2d\xc1\xe6\xb3\x92\x50\x2c\x50\x2d\x2d\x68\x53\xac\xec\x0a\xd0\x43\x64\xe7\x31\xc9\x00\xf1\x90\x56\xf9\x89\x23\xee\x4c\x71\x9b\x9b\x2d\x6e\x68\x7b\x92\x01\x7d\x14\x58\xda\x58\xb4\x41\xd1\xf6\x75\x8d\xbe\x95\xd7\x9e\x13\x53\xd1\x9a\x07\x9a\x4d\x2f\xb2\xec\x0f\xd7\x3e\x34\x0d\xb7\xfa\xed\x2a\x2a\x4b\x57\x64\x7e\xba\x54\x3c\x0c\x2d\xc8\x50\x35\xa7\xd5\xd7\xbe\x89\xf8\x69\x82\x2f\x4e\x0f\x83\x2b\x1d\xbb\xe0\x3f\xc6\x23\x72\x13\x94\x1f\x9c\xf7\x11\xf7\xb9\x99\x5f\xe7\x66\x72\x76\x3e\x3c\xaa\xe5\x99\xbb\x51\x97\x06\x55\xeb\xb2\xc4\x25\x2d\xf2\x75\x69\x71\x9a\x3a\x5e\xba\xff\xd4\xf6\x91\x9d\xb2\x87\x77\xca\x2a\x0d\x8f\xb5\x04\x9b\xe0\xe5\x51\x7e\xa3\xae\xd7\x43\x18\xb7\xa5\x84\x1b\x27\xf5\x71\xf0\xce\xbb\x4e\x94\x8f\xa3\xb7\xa0\x1c\x3b\xcc\xca\xe5\x2c\x7d\xef\x67\x00\x00\x00\xff\xff\x82\xb8\x81\x46\xca\x01\x00\x00")

func _1506167417_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1506167417_initUpSql,
		"1506167417_init.up.sql",
	)
}

func _1506167417_initUpSql() (*asset, error) {
	bytes, err := _1506167417_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1506167417_init.up.sql", size: 458, mode: os.FileMode(420), modTime: time.Unix(1506254876, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _genGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\xcd\x4c\x2f\x4a\x2c\xc9\xcc\xcf\x2b\xe6\xe2\xd2\xd7\x4f\xcf\xb7\x4a\x4f\xcd\x4b\x2d\x4a\x2c\x49\x55\x48\xcf\xd7\x4d\xca\xcc\x4b\x49\x2c\x49\x54\xd0\x2d\xc8\x4e\x47\x52\xa9\xa0\xc7\x05\x08\x00\x00\xff\xff\x19\x7b\xbb\x6d\x3f\x00\x00\x00")

func genGoBytes() ([]byte, error) {
	return bindataRead(
		_genGo,
		"gen.go",
	)
}

func genGo() (*asset, error) {
	bytes, err := genGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gen.go", size: 63, mode: os.FileMode(420), modTime: time.Unix(1506253558, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1506167417_init.down.sql": _1506167417_initDownSql,
	"1506167417_init.up.sql": _1506167417_initUpSql,
	"gen.go": genGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"1506167417_init.down.sql": &bintree{_1506167417_initDownSql, map[string]*bintree{}},
	"1506167417_init.up.sql": &bintree{_1506167417_initUpSql, map[string]*bintree{}},
	"gen.go": &bintree{genGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

